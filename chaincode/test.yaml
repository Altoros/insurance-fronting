###############################################################################
#
#    CLI section
#
###############################################################################
cli:

    # The address that the cli process will use for callbacks from chaincodes
    address: 0.0.0.0:30304



###############################################################################
#
#    REST section
#
###############################################################################
rest:

    # Enable/disable setting for the REST service. It is recommended to disable
    # REST service on validators in production deployment and use non-validating
    # nodes to host REST service
    enabled: true

    # The address that the REST service will listen on for incoming requests.
    address: 0.0.0.0:5000
    
    validPatterns:

        # Valid enrollment ID pattern in URLs: At least one character long, and
        # all characters are A-Z, a-z, 0-9 or _.
        enrollmentID: '^\w+$'

###############################################################################
#
#    LOGGING section
#
###############################################################################
logging:

    # Valid logging levels are case-insensitive strings chosen from

    #     CRITICAL | ERROR | WARNING | NOTICE | INFO | DEBUG

    # Logging 'module' names are also strings, however valid module names are
    # defined at runtime and are not checked for validity during option
    # processing.

    # Default logging levels are specified here for each of the peer
    # commands. For commands that have subcommands, the defaults also apply to
    # all subcommands of the command. These logging levels can be overridden
    # on the command line using the --logging-level command-line option, or by
    # setting the CORE_LOGGING_LEVEL environment variable.

    # The logging level specification is of the form

    #     [<module>[,<module>...]=]<level>[:[<module>[,<module>...]=]<level>...]

    # A logging level by itself is taken as the overall default. Otherwise,
    # overrides for individual or groups of modules can be specified using the
    # <module>[,<module>...]=<level> syntax.

    # Examples:
    #   info                                       - Set default to INFO
    #   warning:main,db=debug:chaincode=info       - Override default WARNING in main,db,chaincode
    #   chaincode=info:main=debug:db=debug:warning - Same as above
    peer:      debug
    crypto:    debug
    status:    debug
    stop:      debug
    login:     debug
    vm:        debug
    chaincode: debug


###############################################################################
#
#    Peer section
#
###############################################################################
peer:

    # Peer Version following version semantics as described here http://semver.org/
    # The Peer supplies this version in communications with other Peers
    version:  0.1.0

    # The Peer id is used for identifying this Peer instance.
    id: vp

    # The privateKey to be used by this peer
    # privateKey: 794ef087680e2494fa4918fd8fb80fb284b50b57d321a31423fe42b9ccf6216047cea0b66fe8365a8e3f2a8140c6866cc45852e63124668bee1daa9c97da0c2a

    # The networkId allows for logical seperation of networks
    # networkId: dev
    # networkId: test
    networkId: dev

    # The Address this Peer will listen on
    listenAddress: 0.0.0.0:40404
    # The Address this Peer will bind to for providing services
    address: 0.0.0.0:40404
    # Whether the Peer should programmatically determine the address to bind to.
    # This case is useful for docker containers.
    addressAutoDetect: false

    # Setting for runtime.GOMAXPROCS(n). If n < 1, it does not change the current setting
    gomaxprocs: -1
    workers: 2

    # Sync related configuration
    sync:
        blocks:
            # Channel size for readonly SyncBlocks messages channel for receiving
            # blocks from oppositie Peer Endpoints.
            # NOTE: currently messages are not stored and forwarded, but rather
            # lost if the channel write blocks.
            channelSize: 10
        state:
            snapshot:
                # Channel size for readonly syncStateSnapshot messages channel
                # for receiving state deltas for snapshot from oppositie Peer Endpoints.
                # NOTE: currently messages are not stored and forwarded, but
                # rather lost if the channel write blocks.
                channelSize: 50
            deltas:
                # Channel size for readonly syncStateDeltas messages channel for
                # receiving state deltas for a syncBlockRange from oppositie
                # Peer Endpoints.
                # NOTE: currently messages are not stored and forwarded,
                # but rather lost if the channel write blocks.
                channelSize: 20

    # Validator defines whether this peer is a validating peer or not, and if
    # it is enabled, what consensus plugin to load
    validator:
        enabled: true

        consensus:
            # Consensus plugin to use. The value is the name of the plugin, e.g. pbft, noops ( this value is case-insensitive)
            # if the given value is not recognized, we will default to noops
            plugin: noops

            # total number of consensus messages which will be buffered per connection before delivery is rejected
            buffersize: 1000

        events:
            # The address that the Event service will be enabled on the validator
            address: 0.0.0.0:31315

            # total number of events that could be buffered without blocking the
            # validator sends
            buffersize: 100

            # milliseconds timeout for producer to send an event.
            # if < 0, if buffer full, unblocks immediately and not send
            # if 0, if buffer full, will block and guarantee the event will be sent out
            # if > 0, if buffer full, blocks till timeout
            timeout: 10
        
    # TLS Settings for p2p communications
    tls:
        enabled:  false
        cert:
            file: testdata/server1.pem
        key:
            file: testdata/server1.key
        # The server name use to verify the hostname returned by TLS handshake
        serverhostoverride:

    # PKI member services properties
    pki:
        eca:
            paddr: localhost:50051
        tca:
            paddr: localhost:50051
        tlsca:
            paddr: localhost:50051
        tls:
            enabled: false
            rootcert:
                file: tlsca.cert
            # The server name use to verify the hostname returned by TLS handshake
            serverhostoverride:

    # Peer discovery settings.  Controls how this peer discovers other peers
    discovery:

        # The root nodes are used for bootstrapping purposes, and generally
        # supplied through ENV variables
        # It can be either a single host or a comma separated list of hosts.
        rootnode:

        # The duration of time between attempts to asks peers for their connected peers
        period:  5s

        ## leaving this in for example of sub map entry
        # testNodes:
        #    - node   : 1
        #      ip     : 127.0.0.1
        #      port   : 40404
        #    - node   : 2
        #      ip     : 127.0.0.1
        #      port   : 40404

        # Should the discovered nodes and their reputations
        # be stored in DB and persisted between restarts
        persist:    true

        # if peer discovery is off
        # the peer window will show
        # only what retrieved by active
        # peer [true/false]
        enabled:    true

        # number of workers that
        # tast the peers for being
        # online [1..10]
        workers: 8

        # the period in seconds with which the discovery
        # tries to reconnect to successful nodes
        # 0 means the nodes are not reconnected
        touchPeriod: 6s

        # the maximum nuber of nodes to reconnect to
        # -1 for unlimited
        touchMaxNodes: 100

    # Path on the file system where peer will store data
    fileSystemPath: /var/hyperledger/production


    profile:
        enabled:     false
        listenAddress: 0.0.0.0:6060

###############################################################################
#
#    VM section
#
###############################################################################
vm:

    # Endpoint of the vm management system.  For docker can be one of the following in general
    # unix:///var/run/docker.sock
    # http://localhost:2375
    # https://localhost:2376
    endpoint: unix:///var/run/docker.sock

    # settings for docker vms
    docker:
        tls:
            enabled: false
            cert:
                file: /path/to/server.pem
            ca:
                file: /path/to/ca.pem
            key:
                file: /path/to/server-key.pem
        # Parameters of docker container creating. For docker can created by custom parameters
        # If you have your own ipam & dns-server for cluster you can use them to create container efficient.
        # NetworkMode Sets the networking mode for the container. Supported standard values are: `host`(default),`bridge`,`ipvlan`,`none`
        # dns A list of DNS servers for the container to use.
        # note: not support customize for `Privileged` 
        hostConfig:
            NetworkMode: host
            Dns:
               # - 192.168.0.1
            
###############################################################################
#
#    Chaincode section
#
###############################################################################
chaincode:

    # The id is used by the Chaincode stub to register the executing Chaincode
    # ID with the Peerand is generally supplied through ENV variables
    # the Path form of ID is provided when deploying the chaincode. The name is
    # used for all other requests. The name is really a hashcode
    # returned by the system in response to the deploy transaction. In
    # development mode where user runs the chaincode, the name can be any string
    id:
        path:
        name:

    golang:

        # This is the basis for the Golang Dockerfile.  Additional commands will
        # be appended depedendent upon the chaincode specification.
        Dockerfile:  |
            from hyperledger/fabric-baseimage
            #from utxo:0.1.0
            COPY src $GOPATH/src
            WORKDIR $GOPATH

    car:

        # This is the basis for the CAR Dockerfile.  Additional commands will
        # be appended depedendent upon the chaincode specification.
        Dockerfile:  |
            FROM hyperledger/fabric-ccenv

    # timeout in millisecs for starting up a container and waiting for Register
    # to come through. 1sec should be plenty for chaincode unit tests
    startuptimeout: 1000

    #timeout in millisecs for deploying chaincode from a remote repository.
    deploytimeout: 30000

    #mode - options are "dev", "net"
    #dev - in dev mode, user runs the chaincode after starting validator from
    # command line on local machine
    #net - in net mode validator will run chaincode in a docker container

    mode: net
    # typically installpath should not be modified. Otherwise, user must ensure
    # the chaincode executable is placed in the path specifed by installpath in
    # the image
    installpath: /opt/gopath/bin/

###############################################################################
#
#    Ledger section - ledger configuration encompases both the blockchain
#    and the state
#
###############################################################################
ledger:

  blockchain:

    # Define the genesis block
    genesisBlock:

  state:

    # Control the number state deltas that are maintained. This takes additional
    # disk space, but allow the state to be rolled backwards and forwards
    # without the need to replay transactions.
    deltaHistorySize: 500

    # The data structure in which the state will be stored. Different data
    # structures may offer different performance characteristics.
    # Options are 'buckettree', 'trie' and 'raw'.
    # ( Note:'raw' is experimental and incomplete. )
    # If not set, the default data structure is the 'buckettree'.
    # This CANNOT be changed after the DB has been created.
    dataStructure:
      # The name of the data structure is for storing the state
      name: buckettree
      # The data structure specific configurations
      configs:
        # configurations for 'bucketree'. These CANNOT be changed after the DB
        # has been created. 'numBuckets' defines the number of bins that the
        # state key-values are to be divided
        numBuckets: 1000003
        # 'maxGroupingAtEachLevel' defines the number of bins that are grouped
        #together to construct next level of the merkle-tree (this is applied
        # repeatedly for constructing the entire tree).
        maxGroupingAtEachLevel: 5
        # 'bucketCacheSize' defines the size (in MBs) of the cache that is used to keep
        # the buckets (from root upto secondlast level) in memory. This cache helps
        # in making state hash computation faster. A value less than or equals to zero
        # leads to disabling this caching. This caching helps more if transactions
        # perform significant writes.
        bucketCacheSize: 100

        # configurations for 'trie'
        # 'tire' has no additional configurations exposed as yet


###############################################################################
#
#    Security section - Applied to all entities (client, NVP, VP)
#
###############################################################################
security:
    # Enable security will force every entity on the network to enroll with obc-ca
    # and maintain a valid set of certificates in order to communicate with
    # other peers
    enabled: true
    # To enroll NVP or VP with membersrvc. These parameters are for 1 time use.
    # They will not be valid on subsequent times without un-enroll first.
    # The values come from off-line registration with obc-ca. For testing, make
    # sure the values are in membersrvc/membersrvc.yaml file eca.users
    enrollID: vp
    enrollSecret: f3489fy98ghf
    # To enable privacy of transactions (requires security to be enabled). This
    # encrypts the transaction content during transit and at rest. The state
    # data is also encrypted
    privacy: false

    # Can be 256 or 384. If you change here, you have to change also
    # the same property in membersrvc.yaml to the same value
    level: 256

    # Can be SHA2 or SHA3. If you change here, you have to change also
    # the same property in membersrvc.yaml to the same value
    hashAlgorithm: SHA3

    # TCerts related configuration
    tcert:
      batch:
        # The size of the batch of TCerts
        size:  2
    # Enable the release of keys needed to decrypt attributes from TCerts in
    # the chaincode using the metadata field of the transaction (requires
    # security to be enabled).
    attributes:
      enabled: true
    multithreading:
      enabled: false

    # Confidentiality protocol version could be 1.1 or 1.2
    confidentialityProtocolVersion: 1.2

################################################################################
#
#   SECTION: STATETRANSFER
#
#   - This applies to recovery behavior when the replica has detected
#     a state transfer is required
#
#   - This might happen:
#     - During a view change in response to a faulty primary
#     - After a network outage which has isolated the replica
#     - If the current blockchain/state is determined to be corrupt
#
################################################################################
statetransfer:

    # Should a replica attempt to fix damaged blocks?
    # In general, this should be set to true, setting to false will cause
    # the replica to panic, and require a human's intervention to intervene
    # and fix the corruption
    recoverdamage: true

    # The number of blocks to retrieve per sync request
    blocksperrequest: 20

    # The maximum number of state deltas to attempt to retrieve
    # If more than this number of deltas is required to play the state up to date
    # then instead the state will be flagged as invalid, and a full copy of the state
    # will be retrieved instead
    maxdeltas: 200

    # Timeouts
    timeout:

        # How long may returning a single block take
        singleblock: 2s

        # How long may returning a single state delta take
        singlestatedelta: 2s

        # How long may transferring the complete state take
        fullstate: 60s
# CA server parameters
#
server:
        # current version of the CA
        version: "0.1"

        # limits the number of operating system threads used by the CA
        # set to negative to use the system default setting
        gomaxprocs: -1

        # path to the OBC state directory and CA state subdirectory
        rootpath: "/var/hyperledger/production"
        cadir: ".membersrvc"

        # port the CA services are listening on
        port: ":50051"

        # TLS certificate and key file paths
        tls:
#              certfile: "/var/hyperledger/production/.membersrvc/tlsca.cert"
#              keyfile: "/var/hyperledger/production/.membersrvc/tlsca.priv"

security:
    # Can be 256 or 384
    # Must be the same as in core.yaml
    level: 256

    # Can be SHA2 or SHA3
    # Must be the same as in core.yaml
    hashAlgorithm: SHA3

# Enabling/disabling different logging levels of the CA.
#
logging:
        trace: 0
        info: 1
        warning: 1
        error: 1
        panic: 1

# Default users to be registered with the CA on first launch.  The role is a binary OR
# of the different roles a user can have:
#
# - simple client such as a wallet: CLIENT
# - non-validating peer: PEER
# - validating client: VALIDATOR
# - auditing client: AUDITOR
#
eca:
        # This hierarchy is used to create the Pre-key tree, affiliations is the top of this hierarchy, 'banks_and_institutions' is used to create the key associated to auditors of both banks and
        # institutions, 'banks' is used to create a key associated to auditors of banks, 'bank_a' is used to create a key associated to auditors of bank_a, etc.
        affiliations:
           banks_and_institutions:
              banks:
                  - bank_a
                  - bank_b
                  - bank_c
              institutions:
                  - institution_a
        users:
                #
                # The fields of each user are as follows:
                #    <EnrollmentID>: <system_role (1:client, 2: peer, 4: validator, 8: auditor)> <EnrollmentPWD> <Affiliation> <Affiliation_Role> <JSON_Metadata>
                #
                # The optional JSON_Metadata field is of the following format:
                #   { "registrar": { "roles": <array-of-role-names>, "delegateRoles": <array-of-role-names> } }
                # The 'registrar' section is used to control access to registration of new users directly via the ECAA.RegisterUser GRPC call.
                # (See the 'fabric/membersrvc/protos/ca.proto' file for the definition of ECAA.RegisterUser.)
                # Note that this also controls who can register users via the client SDK.
                #
                # Only users with a 'registrar' section may be a registrar to register other users.  In particular,
                # 1) the "roles" field specifies which member roles may be registered by this user, and
                # 2) the "delegateRoles" field specifies which member roles may become the "roles" field of registered users.
                # The valid role names are "client", "peer", "validator", and "auditor".
                #
                # Example1:
                #    The 'admin' user below can register clients, peers, validators, or auditors; furthermore, the 'admin' user can register other
                #    users who can then register clients only.
                #
                # Example2:
                #    The 'WebAppAdmin' user below can register clients only, but none of the users registered by this user can register other users.
                #
                admin: 1 Xurw3yU9zI0l institution_a 00001 '{"registrar":{"roles":["client","peer","validator","auditor"],"delegateRoles":["client"]}}'
                WebAppAdmin: 1 DJY27pEnl16d institution_a 00002 '{"registrar":{"roles":["client"]}}'
                lukas: 1 NPKYL39uKbkj bank_a 00001
                system_chaincode_invoker: 1 DRJ20pEql15a institution_a 00002
                diego: 1 DRJ23pEQl16a institution_a 00003
                jim: 1 6avZQLwcUe9b bank_a 00004
                binhn: 1 7avZQLwcUe9q institution_a 00005

                # Users for asset transfer with roles test located at
                # sdk/node/test/unit/asset-mgmt-with-roles.js
                alice: 1 CMS10pEQlB16 bank_a 00006
                bob: 1 NOE63pEQbL25 bank_a 00007
                assigner: 1 Tc43PeqBl11 bank_a 00008

                vp: 4 f3489fy98ghf

                vp0: 4 MwYpmSRjupbT
                vp1: 4 5wgHK9qqYaPy
                vp2: 4 vQelbRvja7cJ
                vp3: 4 9LKqKH5peurL
                test_vp4: 4 Pqh90CEW5juZ
                test_vp5: 4 FfdvDkAdY81P
                test_vp6: 4 QiXJgHyV4t7A
                test_vp7: 4 twoKZouEyLyB
                test_vp8: 4 BxP7QNh778gI
                test_vp9: 4 wu3F1EwJWHvQ

                test_user0: 1 MS9qrN8hFjlE bank_a        00001
                test_user1: 1 jGlNl6ImkuDo institution_a 00007
                test_user2: 1 zMflqOKezFiA bank_c        00008
                test_user3: 1 vWdLCE00vJy0 bank_a        00009
                citi: 1 4nXSrfoYGFCP bank_a 00010
                auditor: 1 yg5DVhm0er1z institution_a        00011
                bermuda: 1 b7pmSxzKNFiw institution_a        00012
                art: 1 YsWZD4qQmYxo institution_a 00013
                allianz: 1 W8G0usrU7jRk institution_a        00014
                nigeria: 1 H80SiB5ODKKQ institution_a 00015

                test_nvp0: 2 iywrPBDEPl0K bank_a        00006
                test_nvp1: 2 DcYXuRSocuqd institution_a 00007
                test_nvp2: 2 flpChShlY7xt bank_c        00008
                test_nvp3: 2 jeruawMomclo bank_a        00009
                test_nvp4: 2 RMYVxSZCk370 institution_a 00010
                test_nvp5: 2 XHYVCIJGZGK7 bank_b        00011
                test_nvp6: 2 4cIn63j8ahYp bank_a        00012
                test_nvp7: 2 E7FAJUtWVn2h institution_a 00013
                test_nvp8: 2 LJu8DkUilBEH bank_a        00014
                test_nvp9: 2 VlEsBsiyXSjw institution_a 00015

tca:
          # Enabling/disabling attributes encryption, currently false is unique possible value due attributes encryption is not yet implemented.
          attribute-encryption:
                 enabled: false
aca:
          # Attributes is a list of the valid attributes to each user, attribute certificate authority is emulated temporarily using this file entries.
          # In the future an external attribute certificate authority will be invoked. The format to each entry is:
          #
          #     attribute-entry-#:{userid};{affiliation};{attributeName};{attributeValue};{valid from};{valid to}
          #
          # If valid to is empty the attribute never expire, if the valid from is empty the attribute is valid from the time zero.
          attributes:
              attribute-entry-0: diego;institution_a;company;ACompany;2015-01-01T00:00:00-03:00;;
              attribute-entry-1: diego;institution_a;position;Software Staff;2015-01-01T00:00:00-03:00;2015-07-12T23:59:59-03:00;
              attribute-entry-2: diego;institution_a;position;Software Engineer;2015-07-13T00:00:00-03:00;;
              attribute-entry-3: jim,;institution_a;company;ACompany;2001-02-02T00:00:00-03:00;;
              attribute-entry-4: jim;institution_a;position;Project Manager;2001-02-02T00:00:00-03:00;;
              attribute-entry-5: binhn,;institution_a;company;ACompany;2015-01-01T00:00:00-03:00;;
              attribute-entry-6: binhn;institution_a;position;Technical Leader;2015-01-01T00:00:00-03:00;;

              # User attributes for asset transfer with roles test located at
              #sdk/node/test/unit/asset-mgmt-with-roles.js
              attribute-entry-7: alice;bank_a;role;client;2016-01-01T00:00:00-03:00;;
              attribute-entry-8: alice;bank_a;account;12345-56789;2016-01-01T00:00:00-03:00;;
              attribute-entry-9: bob;bank_a;role;client;2015-02-02T00:00:00-03:00;;
              attribute-entry-10: bob;bank_a;account;23456-67890;2015-02-02T00:00:00-03:00;;
              attribute-entry-11: assigner;bank_a;role;assigner;2015-01-01T00:00:00-03:00;;

              attribute-entry-12: citi;bank_a;role;bank;2016-01-01T00:00:00-03:00;;
              attribute-entry-13: auditor;institution_a;role;auditor;2016-01-01T00:00:00-03:00;;
              attribute-entry-14: bermuda;institution_a;role;captive;2015-02-02T00:00:00-03:00;;
              attribute-entry-15: art;institution_a;role;reinsurer;2015-02-02T00:00:00-03:00;;
              attribute-entry-16: allianz;institution_a;role;fronter;2015-01-01T00:00:00-03:00;;
              attribute-entry-17: nigeria;institution_a;role;affiliate;2015-01-01T00:00:00-03:00;;

              attribute-entry-18: citi;bank_a;company;Citi;2016-01-01T00:00:00-03:00;;
              attribute-entry-19: auditor;institution_a;company;Auditor;2016-01-01T00:00:00-03:00;;
              attribute-entry-20: bermuda;institution_a;company;Bermuda;2015-02-02T00:00:00-03:00;;
              attribute-entry-21: art;institution_a;company;Art;2015-02-02T00:00:00-03:00;;
              attribute-entry-22: allianz;institution_a;company;Allianz;2015-01-01T00:00:00-03:00;;
              attribute-entry-23: nigeria;institution_a;company;Nigeria;2015-01-01T00:00:00-03:00;;

          address: localhost:50051
          server-name: acap
          # Enabling/disabling Attribute Certificate Authority, if ACA is enabled attributes will be added into the TCert.
          enabled: true
pki:
          ca:
                 subject:
                         organization: Hyperledger
                         country: US
